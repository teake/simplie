/*
 * RootSpaceDrawer.java
 *
 * Created on 9 April 2007, 12:08
 *
 * This file is part of SimpLie.
 * 
 * SimpLie is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SimpLie is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SimpLie.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package edu.rug.hep.simplie.ui;

import edu.rug.hep.simplie.CAlgebraComposite;
import edu.rug.hep.simplie.algebra.CRoot;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.Collection;
import java.util.Iterator;
import javax.media.opengl.GL;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLContext;
import javax.media.opengl.GLEventListener;
import javax.media.opengl.GLJPanel;

/**
 *
 * @author  Teake Nutma
 */
public class RootSpaceDrawer extends javax.swing.JPanel implements GLEventListener, MouseMotionListener
{
	private GLAutoDrawable glDrawable;
	private GL gl;
	private GLContext context;
	
	private float red[]		= { 0.8f, 0.1f, 0.0f, 1.0f };
	private float green[]	= { 0.0f, 0.8f, 0.2f, 1.0f };
	private float blue[]	= { 0.2f, 0.2f, 1.0f, 1.0f };
	private float view_rotx = 0.0f, view_roty = 0.0f;
	private float zoom		= 1.0f;
	private int prevMouseX, prevMouseY;
	private int rootsObj;
	
	private CAlgebraComposite algebras;
	
	
	/** Creates new form RootSpaceDrawer */
	public RootSpaceDrawer()
	{
		initComponents();

		canvas.addGLEventListener(this);
		canvas.addMouseMotionListener(this);
	}
	
	public void setAlgebrasComposite(CAlgebraComposite algebras)
	{
		this.algebras = algebras;
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        bDrawRoots = new javax.swing.JButton();
        canvas = new javax.media.opengl.GLJPanel();
        bReset = new javax.swing.JButton();

        bDrawRoots.setText("Draw root space");
        bDrawRoots.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bDrawRootsActionPerformed(evt);
            }
        });

        canvas.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        canvas.setOpaque(false);

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 509, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        bReset.setText("Reset position");
        bReset.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bDrawRoots)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bReset)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bDrawRoots)
                    .addComponent(bReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void bDrawRootsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bDrawRootsActionPerformed
	{//GEN-HEADEREND:event_bDrawRootsActionPerformed
		if(algebras.algebra == null)
			return;
		
		updateRoots();
		canvas.repaint();
		canvas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Root space of " + algebras.algebra.type, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));
}//GEN-LAST:event_bDrawRootsActionPerformed

	private void bResetActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bResetActionPerformed
	{//GEN-HEADEREND:event_bResetActionPerformed
		view_rotx = view_roty = 0.0f;
		zoom = 1.0f;
		canvas.repaint();
	}//GEN-LAST:event_bResetActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDrawRoots;
    private javax.swing.JButton bReset;
    private javax.media.opengl.GLJPanel canvas;
    // End of variables declaration//GEN-END:variables

	public void init(GLAutoDrawable drawable)
	{
		this.gl			= drawable.getGL();
		this.glDrawable	= drawable;
		this.context	= drawable.getContext();
		
		rootsObj = gl.glGenLists(1);
		
		gl.glEnable(GL.GL_CULL_FACE);
		gl.glEnable(GL.GL_DEPTH_TEST);
		gl.glEnable(GL.GL_POINT_SMOOTH);
		gl.glEnable(GL.GL_NORMALIZE);
		
		// TODO: implement the following
		/*
		if(gl.isExtensionAvailable("GL_EXT_point_parameters"))
		{
			float[] quadratic = { 0.25f, 0.0f, 1/60.0f };
			gl.glPointParameterfvEXT(GL.GL_DISTANCE_ATTENUATION_EXT, quadratic, 0);
			gl.glPointParameterfEXT(GL.GL_POINT_FADE_THRESHOLD_SIZE_EXT, 1.0f);
		}
		 */
	}

	public void display(GLAutoDrawable drawable)
	{
		// Reset stuff.
		if ((drawable instanceof GLJPanel) &&
				!((GLJPanel) drawable).isOpaque() &&
				((GLJPanel) drawable).shouldPreserveColorBufferIfTranslucent()) {
			gl.glClear(GL.GL_DEPTH_BUFFER_BIT);
		} 
		else
		{
			gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
		}
		gl.glPushMatrix();
		
		// Rotate and zoom the coordinate system.
		gl.glRotatef(view_rotx,1.0f,0.0f,0.0f);
		gl.glRotatef(view_roty,0.0f,1.0f,0.0f);
		gl.glScalef(zoom, zoom, zoom);
		gl.glPointSize(16.0f * zoom);
		
		// Draw the roots.
		gl.glCallList(rootsObj);
		
		gl.glPopMatrix();
	}

	public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height)
	{
		float h = (float)height / (float)width;

		gl.glMatrixMode(GL.GL_PROJECTION);

		gl.glLoadIdentity();
		gl.glFrustum(-1.0f, 1.0f, -h, h, 10.0f, 60.0f);
		gl.glMatrixMode(GL.GL_MODELVIEW);
		gl.glLoadIdentity();
		gl.glTranslatef(0.0f, 0.0f, -40.0f);
		
		canvas.repaint();
	}

	public void displayChanged(GLAutoDrawable drawable, boolean modeChanged, boolean deviceChanged)
	{
	}

	public void mouseDragged(MouseEvent e)
	{
		int x = e.getX();
		int y = e.getY();
		
		Dimension size = e.getComponent().getSize();
		
		// Shift down: zoom
		if(e.isShiftDown())
		{
			float diff = (float)(prevMouseY-y)/(float)size.height;
			zoom *= 1 + 2*diff;
		}
		else
		{
			float thetaY = 240.0f * ( (float)(x-prevMouseX)/(float)size.width);
			float thetaX = 240.0f * ( (float)(prevMouseY-y)/(float)size.height);
			view_rotx -= thetaX;
			view_roty -= thetaY;
		}
		
		prevMouseX = x;
		prevMouseY = y;
		
		canvas.repaint();
	}

	public void mouseMoved(MouseEvent e)
	{
		prevMouseX = e.getX();
		prevMouseY = e.getY();
	}

	private void updateRoots()
	{
		if(context == null)
			return;
		context.makeCurrent();
		
		gl.glNewList(rootsObj, GL.GL_COMPILE);
		
		if(algebras.algebra != null && algebras.algebra.rank > 0)
		{
			int rank		= algebras.algebra.rank;
			int numPerCoor	= (int) Math.floor(rank / 3);
			int remainder	= rank % 3;
			
			// First do the CSA
			drawRoot(blue,0.0f,0.0f,0.0f);
			
			// The rest of the roots.
			for(int i = 1; i < algebras.algebra.rs.size(); i++)
			{
				Collection<CRoot> roots = algebras.algebra.rs.get(i);
				for(Iterator it = roots.iterator(); it.hasNext();)
				{
					CRoot root = (CRoot) it.next();
					
					// Calculate the coordinates.
					float pos[] = { 0.0f, 0.0f, 0.0f };
					for(int j = 0; j < 3; j++)
					{
						for(int k = 0; k < numPerCoor; k++)
						{
							pos[j] += root.vector[remainder + numPerCoor*j + k];
						}
						if(j < remainder)
						{
							pos[j] += root.vector[j];
						}
					}
					// Draw a positive root.
					drawRoot(green,pos[0],pos[1],pos[2]);
					// Draw a negative root.
					drawRoot(red,-pos[0],-pos[1],-pos[2]);
				}
			}
		}
		gl.glEndList();
	}
	
	private void drawRoot(float[] color, float x, float y, float z)
	{
		gl.glColor3f(color[0],color[1],color[2]);
		gl.glBegin(GL.GL_POINTS);
			gl.glVertex3f(x, y, z);
		gl.glEnd();				
	}	
}
