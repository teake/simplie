/*
 * DynkinDiagramPanel.java
 *
 * Created on 20 maart 2007, 17:40
 */

package tan.leveldecomposition.ui;

import tan.leveldecomposition.dynkindiagram.*;
import tan.leveldecomposition.*;

import java.awt.Graphics;
import java.awt.Cursor;

/**
 *
 * @author  Teake Nutma
 */
public class DynkinDiagramPanel extends javax.swing.JPanel
{
	private int spacing;
	private int radius;
	private int offset;
	
	private boolean		addingConnection;
	private CDynkinNode connectionTo;
	
	private AlgebraSetup algebraSetup;
	
	/** Creates new form DynkinDiagramPanel */
	public DynkinDiagramPanel()
	{
		initComponents();
		
		spacing = 40;
		radius	= 10;
		offset	= 25;
		
		addingConnection	= false;
		connectionTo		= null;
		
		this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
	}
	
	public void Initialize(AlgebraSetup algebraSetup)
	{
		this.algebraSetup = algebraSetup;
	}
	
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		Globals.dd.drawDiagram(g,offset,spacing,radius);
	}
	
	private void startAddConnection(CDynkinNode node)
	{
		addingConnection = true;
		connectionTo = node;
		this.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
	}
	private void stopAddConnection()
	{
		addingConnection = false;
		connectionTo = null;
		this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
	}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 138, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 90, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
	
    private void formMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseReleased
    {//GEN-HEADEREND:event_formMouseReleased
		// Don't do anything while we are scanning.
		if(Globals.scanning)
			return;
		
		int x = Math.round((evt.getX() - offset) / spacing);
		int y = Math.round((evt.getY() - offset) / spacing);
		CDynkinNode node = Globals.dd.getNodeByCoor(x,y);
		
		// Left-mouse click: add or remove a node.
		if(evt.getButton() == evt.BUTTON1 && !evt.isAltDown())
		{
			if(!evt.isControlDown())
				Globals.dd.addNode(x,y,evt.isShiftDown());
			else
				Globals.dd.removeNode(node);
		}
		
		if(node == null)
		{
			stopAddConnection();
			algebraSetup.Update();
			return;
		}
		
		// Middle mouse or alt+left: toggle a node.
		if(evt.getButton() == evt.BUTTON2 || (evt.getButton() == evt.BUTTON1 && evt.isAltDown() ) )
		{
			stopAddConnection();
			node.toggle();
		}
		
		// Right-mouse: add or remove a connection.
		if(evt.getButton() == evt.BUTTON3)
		{
			if(!addingConnection)
			{
				startAddConnection(node);
			}
			else
			{
				Globals.dd.modifyConnection(node, connectionTo, !evt.isControlDown());
				stopAddConnection();
			}
		}
		
		algebraSetup.Update();
    }//GEN-LAST:event_formMouseReleased
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	
}
