/*
 * LevelDecomposition.java
 *
 * Created on 13 maart 2007, 16:43
 */

package tan.leveldecomposition.ui;

import tan.leveldecomposition.dynkindiagram.*;
import tan.leveldecomposition.leveldecomposer.*;
import tan.leveldecomposition.helper.*;
import java.util.*;

/**
 *
 * @author  Teake Nutma
 */
public class LevelDecomposition extends javax.swing.JPanel
{
    CDynkinDiagram	dynkinDiagram;
    CLevelDecomposer	levelDecomposer;
    CHelper		helper;
    Vector<CRepresentation> reps;
    
    /** Creates new form LevelDecomposition */
    public LevelDecomposition()
    {
	initComponents();
	levelDecomposer = new CLevelDecomposer();
	helper		= new CHelper();
	
	autoScanMinLevel.SetLabel("Minimum level:");
	autoScanMaxLevel.SetLabel("Maximum level:");
	
    }
    
    public void Initialize(CDynkinDiagram diagram)
    {
	dynkinDiagram = diagram;
    }
    
    /** Automatically scan every possible level between minLevel and maxLevel */
    public void AutoScan(int minLevel, int maxLevel)
    {
	if(minLevel > maxLevel)
	    return;
	if(dynkinDiagram.GetRank() == dynkinDiagram.GetSubRank())
	    return;
	
	levelDecomposer.Initialize(
		dynkinDiagram.GetRank(),
		dynkinDiagram.GetSubRank(),
		dynkinDiagram.GetCartanMatrix(),
		dynkinDiagram.GetCartanSubMatrix().inverse(),
		dynkinDiagram.GetEnabledNodes()
		);
	
	int[] levels = new int[dynkinDiagram.GetRank() - dynkinDiagram.GetSubRank()];
	for (int i = 0; i < dynkinDiagram.GetRank() - dynkinDiagram.GetSubRank(); i++)
	{
	    levels[i] = minLevel;
	}
	reps = new Vector<CRepresentation>();
	LoopLevels(levels.clone(),0,maxLevel, true);
	PopulateTable(reps);
    }
    
    /** Iterates through all possible levels for which levels[i] <= maxLevel and scans them. */
    private void LoopLevels(int[] levels, int beginIndex, int maxLevel, boolean scanFirst)
    {
	do
	{
	    /**
	     * Keep the triangular decomposition in mind:
	     * if levels[i] < 0 then levels[j] > 0 can not be for any i and j.
	     */
	    for (int i = 0; i < levels.length - 1; i++)
	    {
		if(i < beginIndex && levels[i] < 0 && levels[beginIndex] > 0)
		    /** We can safely abort this line. */
		    return;
		
		if(levels[i] > 0 && levels[i+1] < 0)
		{
		    /** Increase the value of the remaining levels to at least 0. */
		    for(int j = i+1; j < levels.length; j++ )
		    {
			levels[j] = 0;
		    }
		    /** We changed the levels, so scan it. */
		    scanFirst = true;
		    break;
		}
	    }
	    
	    /** Only scan the level if we haven't scanned it already. */
	    if(scanFirst)
		reps.addAll(levelDecomposer.ScanLevel(levels));
	    
	    /** Loop through the remaining indices */
	    if(beginIndex + 1 < levels.length)
		LoopLevels(levels.clone(), beginIndex + 1, maxLevel, false);
	    
	    /** Increase the current level and scan it the next loop. */
	    levels[beginIndex]++;
	    scanFirst = true;
	    
	} while(levels[beginIndex] <= maxLevel);
    }
    
    /** Populates the table with data from the argument. */
    private void PopulateTable(Vector<CRepresentation> reps)
    {
	Object[][] data = new Object[reps.size()][4];
	int i = 0;
	for (Enumeration e = reps.elements(); e.hasMoreElements();)
	{
	    CRepresentation rep = (CRepresentation) e.nextElement();
	    data[i][0] = helper.IntArrayToString(rep.GetLevels());
	    data[i][1] = helper.IntArrayToString(rep.GetDynkinLabels());
	    data[i][2] = helper.IntArrayToString(rep.GetRootComponents());
	    data[i][3] = rep.GetRootLength();
	    i++;
	}
	
	representationsTable.setModel(new javax.swing.table.DefaultTableModel(data,new String [] {"l", "p", "m", "root length"}	));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        SinglelLevelScanPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        RepresentationPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        representationsTable = new javax.swing.JTable();
        AutoScanPanel = new javax.swing.JPanel();
        bAutoScan = new javax.swing.JButton();
        autoScanMinLevel = new tan.leveldecomposition.ui.LevelTextfield();
        autoScanMaxLevel = new tan.leveldecomposition.ui.LevelTextfield();

        SinglelLevelScanPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Single level scan", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));
        jButton1.setText("Scan");

        javax.swing.GroupLayout SinglelLevelScanPanelLayout = new javax.swing.GroupLayout(SinglelLevelScanPanel);
        SinglelLevelScanPanel.setLayout(SinglelLevelScanPanelLayout);
        SinglelLevelScanPanelLayout.setHorizontalGroup(
            SinglelLevelScanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SinglelLevelScanPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addContainerGap())
        );
        SinglelLevelScanPanelLayout.setVerticalGroup(
            SinglelLevelScanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SinglelLevelScanPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(346, Short.MAX_VALUE))
        );

        RepresentationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Subalgebra Representations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));
        representationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "l", "p", "m", "root length"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        representationsTable.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(representationsTable);

        javax.swing.GroupLayout RepresentationPanelLayout = new javax.swing.GroupLayout(RepresentationPanel);
        RepresentationPanel.setLayout(RepresentationPanelLayout);
        RepresentationPanelLayout.setHorizontalGroup(
            RepresentationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RepresentationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addContainerGap())
        );
        RepresentationPanelLayout.setVerticalGroup(
            RepresentationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RepresentationPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addContainerGap())
        );

        AutoScanPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Automatic scan", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));
        bAutoScan.setText("Scan");
        bAutoScan.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bAutoScanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AutoScanPanelLayout = new javax.swing.GroupLayout(AutoScanPanel);
        AutoScanPanel.setLayout(AutoScanPanelLayout);
        AutoScanPanelLayout.setHorizontalGroup(
            AutoScanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AutoScanPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AutoScanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(AutoScanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(autoScanMaxLevel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(autoScanMinLevel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bAutoScan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        AutoScanPanelLayout.setVerticalGroup(
            AutoScanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AutoScanPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(autoScanMaxLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoScanMinLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bAutoScan)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SinglelLevelScanPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AutoScanPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RepresentationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(RepresentationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AutoScanPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SinglelLevelScanPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void bAutoScanActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bAutoScanActionPerformed
    {//GEN-HEADEREND:event_bAutoScanActionPerformed
	AutoScan(autoScanMinLevel.GetValue(),autoScanMaxLevel.GetValue());
    }//GEN-LAST:event_bAutoScanActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AutoScanPanel;
    private javax.swing.JPanel RepresentationPanel;
    private javax.swing.JPanel SinglelLevelScanPanel;
    private tan.leveldecomposition.ui.LevelTextfield autoScanMaxLevel;
    private tan.leveldecomposition.ui.LevelTextfield autoScanMinLevel;
    private javax.swing.JButton bAutoScan;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable representationsTable;
    // End of variables declaration//GEN-END:variables
    
}
